import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c8abf601.js";const d=JSON.parse('{"title":"语言规范","description":"","frontmatter":{},"headers":[],"relativePath":"content/JS规范/代码规范/index.md","filePath":"content/JS规范/代码规范/index.md","lastUpdated":1686030455000}'),o={name:"content/JS规范/代码规范/index.md"},p=l(`<h1 id="语言规范" tabindex="-1">语言规范 <a class="header-anchor" href="#语言规范" aria-label="Permalink to &quot;语言规范&quot;">​</a></h1><h2 id="_1-在单行代码块中使用空格" tabindex="-1">1. 在单行代码块中使用空格 <a class="header-anchor" href="#_1-在单行代码块中使用空格" aria-label="Permalink to &quot;1. 在单行代码块中使用空格&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (foo) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">bar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_2-大括号风格" tabindex="-1">2. 大括号风格 <a class="header-anchor" href="#_2-大括号风格" aria-label="Permalink to &quot;2. 大括号风格&quot;">​</a></h2><p>约定使用 One True Brace Style 风格。</p><ul><li>One True Brace Style</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (foo) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">bar</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">baz</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_3-变量命名" tabindex="-1">3. 变量命名 <a class="header-anchor" href="#_3-变量命名" aria-label="Permalink to &quot;3. 变量命名&quot;">​</a></h2><p>约定使用驼峰式命名（constiableName）。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 驼峰式命名（constiableName）</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> userInfo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">小王</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="_4-拖尾逗号" tabindex="-1">4. 拖尾逗号 <a class="header-anchor" href="#_4-拖尾逗号" aria-label="Permalink to &quot;4. 拖尾逗号&quot;">​</a></h2><p>在 ECMAScript5 里面，对象字面量中的拖尾逗号是合法的，但在 IE8（非 IE8 文档模式）下，当出现拖尾逗号，则会抛出错误。</p><p>拖尾逗号的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">22</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><ul><li><strong>拖尾逗号的好处是，简化了对象和数组添加或删除元素，我们只需要修改新增的行即可，并不会增加差异化的代码行数。</strong><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>因为拖尾逗号有好也有不好，所以团队约定允许在最后一个元素或属性与闭括号 ] 或 } 在不同行时，可以（但不要求）使用拖尾逗号。当在同一行时，禁止使用拖尾逗号。</p></div></li></ul><h2 id="_5-逗号空格" tabindex="-1">5. 逗号空格 <a class="header-anchor" href="#_5-逗号空格" aria-label="Permalink to &quot;5. 逗号空格&quot;">​</a></h2><p>逗号前后的空格可以提高代码的可读性，约定在逗号后面使用空格，逗号前面不加空格。</p><h2 id="_6-逗号风格" tabindex="-1">6. 逗号风格 <a class="header-anchor" href="#_6-逗号风格" aria-label="Permalink to &quot;6. 逗号风格&quot;">​</a></h2><h2 id="逗号分隔列表时-在-javascript-中主要有两种逗号风格" tabindex="-1">逗号分隔列表时，在 JavaScript 中主要有两种逗号风格： <a class="header-anchor" href="#逗号分隔列表时-在-javascript-中主要有两种逗号风格" aria-label="Permalink to &quot;逗号分隔列表时，在 JavaScript 中主要有两种逗号风格：&quot;">​</a></h2><ul><li>标准风格，逗号放置在当前行的末尾。</li><li>逗号前置风格，逗号放置在下一行的开始位置。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="_7-计算属性的空格" tabindex="-1">7. 计算属性的空格 <a class="header-anchor" href="#_7-计算属性的空格" aria-label="Permalink to &quot;7. 计算属性的空格&quot;">​</a></h2><p>约定在对象的计算属性内，禁止使用空格。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#A6ACCD;">obj[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="_8-拖尾换行" tabindex="-1">8. 拖尾换行 <a class="header-anchor" href="#_8-拖尾换行" aria-label="Permalink to &quot;8. 拖尾换行&quot;">​</a></h2><p>在非空文件中，存在拖尾换行是一个常见的 UNIX 风格，它的好处是可以方便在串联和追加文件时不会打断 Shell 的提示。在日常的项目中，保留拖尾换行的好处是，可以减少版本控制时的代码冲突。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// do something</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 此处是新的一行</span></span></code></pre></div><h2 id="_9-函数调用" tabindex="-1">9. 函数调用 <a class="header-anchor" href="#_9-函数调用" aria-label="Permalink to &quot;9. 函数调用&quot;">​</a></h2><p>为了避免语法错误，团队约定在函数调用时，禁止使用空格。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//good</span></span>
<span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="_10-缩进" tabindex="-1">10. 缩进 <a class="header-anchor" href="#_10-缩进" aria-label="Permalink to &quot;10. 缩进&quot;">​</a></h2><p>约定使用 制表符（TAB） 来缩进，而且缩进使用两个空格。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>请在 vscode 的设置项里面配置，即 <strong>1</strong> 个 <strong><em>制表符</em></strong> 代表 <strong>4</strong> 个 <strong><em>空格</em></strong></p></div><h1 id="_11-链式赋值" tabindex="-1">11. 链式赋值 <a class="header-anchor" href="#_11-链式赋值" aria-label="Permalink to &quot;11. 链式赋值&quot;">​</a></h1><p>链式赋值容易造成代码的可读性差，所以约定禁止使用链式赋值！</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>禁止使用链式赋值，阅读起来使人痛苦！</p></div><h1 id="_12-变量声明" tabindex="-1">12. 变量声明 <a class="header-anchor" href="#_12-变量声明" aria-label="Permalink to &quot;12. 变量声明&quot;">​</a></h1><p>约定在声明变量时，一个声明只能有一个变量。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> c</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> c</span></span></code></pre></div><h1 id="_13-操作符的空格" tabindex="-1">13. 操作符的空格 <a class="header-anchor" href="#_13-操作符的空格" aria-label="Permalink to &quot;13. 操作符的空格&quot;">​</a></h1><p>约定操作符前后都需要添加空格。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h1 id="_14-分号" tabindex="-1">14. 分号 <a class="header-anchor" href="#_14-分号" aria-label="Permalink to &quot;14. 分号&quot;">​</a></h1><p>约定每个语句后面都加上分号。</p>`,45),e=[p];function t(c,r,i,y,D,F){return a(),n("div",null,e)}const A=s(o,[["render",t]]);export{d as __pageData,A as default};
